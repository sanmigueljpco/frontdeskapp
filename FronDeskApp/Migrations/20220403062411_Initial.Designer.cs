// <auto-generated />
using System;
using FronDeskApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FronDeskApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220403062411_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113");

            modelBuilder.Entity("FronDeskApp.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Firtname");

                    b.Property<string>("Lastname");

                    b.Property<int>("Phone");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FronDeskApp.Models.CustomerStorage", b =>
                {
                    b.Property<int>("CustomerStorageId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("In");

                    b.Property<DateTime?>("Out");

                    b.Property<int>("StorageId");

                    b.HasKey("CustomerStorageId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StorageId");

                    b.ToTable("CustomerStorages");
                });

            modelBuilder.Entity("FronDeskApp.Models.Storage", b =>
                {
                    b.Property<int>("StorageId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Row");

                    b.Property<int>("StorageTypeId");

                    b.HasKey("StorageId");

                    b.HasIndex("StorageTypeId");

                    b.ToTable("Storages");

                    b.HasData(
                        new { StorageId = 1, Row = 1, StorageTypeId = 1 },
                        new { StorageId = 2, Row = 1, StorageTypeId = 1 },
                        new { StorageId = 3, Row = 1, StorageTypeId = 1 },
                        new { StorageId = 4, Row = 1, StorageTypeId = 2 },
                        new { StorageId = 5, Row = 1, StorageTypeId = 3 },
                        new { StorageId = 6, Row = 1, StorageTypeId = 3 }
                    );
                });

            modelBuilder.Entity("FronDeskApp.Models.StorageType", b =>
                {
                    b.Property<int>("StorageTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("StorageTypeId");

                    b.ToTable("StorageTypes");

                    b.HasData(
                        new { StorageTypeId = 1, Description = "Small", Name = "Small" },
                        new { StorageTypeId = 2, Description = "Medium", Name = "Medium" },
                        new { StorageTypeId = 3, Description = "Large", Name = "Large" }
                    );
                });

            modelBuilder.Entity("FronDeskApp.Models.CustomerStorage", b =>
                {
                    b.HasOne("FronDeskApp.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FronDeskApp.Models.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FronDeskApp.Models.Storage", b =>
                {
                    b.HasOne("FronDeskApp.Models.StorageType", "StorageType")
                        .WithMany()
                        .HasForeignKey("StorageTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
